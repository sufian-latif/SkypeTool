package com.konasl.skype.ui;

import com.konasl.skype.ContactManager;
import com.konasl.skype.DropboxContactManager;
import com.konasl.skype.PersonInfo;
import com.skype.Skype;
import com.skype.SkypeException;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
r
/**
 * Created by Sufian Latif on 11/18/2015.
 */
public class SkypeToolForm {
    private JScrollPane scrollPaneContacts;
    private JTable tabContacts;
    private JButton btnReload;
    private JButton btnDeselectAll;
    private JButton btnSelectAll;
    private JTextField txtMessage;
    private JButton btnSend;
    private JPanel parent;

    private final String DEFAULT_INVITATION = "Hi $NAME, I'd like to add you as a contact.";
    private ArrayList<PersonInfo> persons;

    public SkypeToolForm() {
        btnReload.addActionListener(ReloadActionListener);
        btnSelectAll.addActionListener(SelectionListener);
        btnDeselectAll.addActionListener(SelectionListener);
        txtMessage.setText(DEFAULT_INVITATION);
        btnSend.addActionListener(SendListener);

        try {
            loadContacts();
        } catch (Exception e) {

        }
    }

    private void loadContacts() throws Exception {
        ArrayList<String> contacts;
        ContactManager contactManager = new DropboxContactManager();
        contacts = contactManager.loadContacts();
        persons = new ArrayList<PersonInfo>();
        for (String id : contacts) persons.add(new PersonInfo(id));
        for (PersonInfo pInfo : persons) System.out.println(pInfo);
        tabContacts.setModel(new ContactTableModel(persons));

        String ownId = Skype.getProfile().getId();
        if (!contacts.contains(ownId)) {
            contacts.add(ownId);
            contactManager.updateContacts(contacts);
        }
    }

    private final ActionListener ReloadActionListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
        try {
            loadContacts();
        } catch (Exception ex) {

        }
        }
    };

    private final ActionListener SelectionListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
        for (int i = 0; i < tabContacts.getModel().getRowCount(); i++) {
            tabContacts.getModel().setValueAt(e.getSource() == btnSelectAll, i, 0);
        }
        }
    };

    private final ActionListener SendListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
        for (int i = 0; i < tabContacts.getModel().getRowCount(); i++) {
            if (!(Boolean) tabContacts.getModel().getValueAt(i, 0)) continue;
            String name = (String) tabContacts.getModel().getValueAt(i, 1);
            String handle = (String) tabContacts.getModel().getValueAt(i, 2);

            try {
                Skype.getContactList().addFriend(handle, txtMessage.getText().replace("$NAME", name));
                System.out.println("Request sent to " + name);
            } catch (SkypeException e1) {
                e1.printStackTrace();
            }
        }
        }
    };

//    private void setUiEnabledState(boolean state) {
//        btnReload.setEnabled(state);
//        btnSelectAll.setEnabled(state);
//        btnDeselectAll.setEnabled(state);
//        btnSend.setEnabled(state);
//        txtMessage.setEnabled(state);
//    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("KonaSL Skype Tool");
        frame.setContentPane(new SkypeToolForm().parent);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        parent = new JPanel();
        parent.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        parent.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Contacts List", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, new Font(panel1.getFont().getName(), panel1.getFont().getStyle(), panel1.getFont().getSize())));
        scrollPaneContacts = new JScrollPane();
        panel1.add(scrollPaneContacts, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tabContacts = new JTable();
        scrollPaneContacts.setViewportView(tabContacts);
        btnReload = new JButton();
        btnReload.setText("Reload");
        panel1.add(btnReload, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(72, 32), null, 0, false));
        btnDeselectAll = new JButton();
        btnDeselectAll.setText("Deselect all");
        panel1.add(btnDeselectAll, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnSelectAll = new JButton();
        btnSelectAll.setText("Select all");
        panel1.add(btnSelectAll, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(5, 5, 5, 5), -1, -1));
        parent.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Invitation Message (use $NAME for recipient's name) :");
        panel2.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtMessage = new JTextField();
        txtMessage.setText("");
        panel2.add(txtMessage, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btnSend = new JButton();
        btnSend.setText("Send");
        panel2.add(btnSend, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return parent;
    }
}
